要将从Kubernetes集群中获取的Pod信息发送到AWS CloudWatch，你需要编写一个脚本来处理这个过程。这个脚本将使用kubectl来获取Pod信息，然后使用AWS CLI或AWS SDK来调用CloudWatch的put-metric-data API。

下面是一个简化的Bash脚本示例，它演示了如何从Kubernetes集群中获取Pod的CPU使用率（这通常需要额外的监控工具，如cAdvisor或Prometheus Node Exporter，并且可能需要一些自定义逻辑来解析这些数据），并将这些数据作为自定义指标发送到AWS CloudWatch。请注意，这个脚本是一个概念性示例，并不包含所有必要的细节，特别是关于如何实际获取CPU使用率的部分。

bash
复制代码
#!/bin/bash
 
# AWS CloudWatch命名空间
NAMESPACE="MyKubernetesMetrics"
# Kubernetes命名空间
K8S_NAMESPACE="my-namespace"
# AWS区域
AWS_REGION="us-west-2"
# 假设你有一个机制来获取Pod的CPU使用率，这里用dummy数据代替
 
# 获取Pod名称和假设的CPU使用率（这里需要替换为实际获取CPU使用率的逻辑）
PODS_CPU_USAGE=$(cat <<EOF
my-pod-1 50
my-pod-2 75
EOF
)
 
# 设置AWS CLI配置（如果你已经配置了AWS CLI的默认区域和凭证，这一步可以省略）
export AWS_DEFAULT_REGION=$AWS_REGION
 
# 遍历Pod名称和CPU使用率，并发送到CloudWatch
echo "$PODS_CPU_USAGE" | while IFS= read -r PodName CPUUsage; do
    # 获取当前时间戳（CloudWatch需要的格式）
    TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
    
    # 使用AWS CLI发送指标到CloudWatch
    aws cloudwatch put-metric-data --namespace "$NAMESPACE" --metric-data file://<(echo -e "MetricName=PodCpuUsage,Dimensions=[{Name=PodName,Value=$PodName}],Timestamp=$TIMESTAMP,Value=$CPUUsage,Unit=Percent")
    
    # 输出日志，确认指标已发送
    echo "Sent PodCpuUsage metric for $PodName with CPU usage $CPUUsage%"
done
重要注意事项：

获取CPU使用率：上面的脚本使用了dummy数据（PODS_CPU_USAGE变量）。在实际环境中，你需要使用像Prometheus这样的监控工具来收集Pod的CPU使用率，并可能需要编写额外的逻辑来解析这些数据。
AWS CLI配置：确保你的AWS CLI已经配置好，包括AWS凭证和默认区域。
时间戳：CloudWatch要求指标的时间戳是ISO 8601格式，并且精确到毫秒。上面的脚本使用了date命令来生成这样的时间戳。
安全性：在生产环境中，避免在脚本中硬编码敏感信息（如AWS凭证）。考虑使用AWS IAM角色、环境变量或AWS Secrets Manager来安全地管理这些信息。
错误处理：上面的脚本没有包含错误处理逻辑。在实际脚本中，你应该添加适当的错误处理来捕获和处理AWS CLI命令可能返回的错误。
权限：确保你的AWS IAM用户或角色有足够的权限来调用cloudwatch:PutMetricData API。
由于获取Pod的CPU使用率通常涉及到更复杂的设置（如Prometheus和Grafana的集成），因此上述脚本更多是一个起点，而不是一个完整的解决方案。你可能需要根据你的具体环境和需求来调整这个脚本。
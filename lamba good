抱歉，我之前没有完全解释清楚。您的目标是通过 Lambda 函数在 AWS CloudWatch Dashboard 上查询 **Kubernetes Pod 所在的 EC2 Node 实例 ID**。为了明确地回答您的问题，下面我将给出一个详细的解决方案。

### 目标：
- 查询 Kubernetes Pod 所在的 EC2 Node 实例 ID。
- 使用 **AWS CLI** 来执行此查询。
- 使用 **Lambda（Python）** 来处理查询，并通过 **API Gateway** 与 **CloudWatch Dashboard** 集成，展示结果。

### 实现思路：

1. **查询 Kubernetes Pod 所在的 EC2 Node 实例 ID**：
   - 在 Kubernetes 集群中，Pod 会在某个 Node 上运行。每个 Node 都有一个与之关联的 EC2 实例 ID。
   - 通过调用 AWS CLI 或 AWS SDK，你可以从 Kubernetes API 获取 Pod 的节点（Node）信息，并结合 EC2 实例元数据查询其实例 ID。

2. **Lambda（Python）**：
   - Lambda 函数会调用 AWS CLI 查询 Kubernetes 集群中的 Pod 和其所在 Node 的信息。
   - 然后通过 API Gateway 暴露 Lambda 函数，允许从 CloudWatch Dashboard 中进行调用。

### 步骤 1：准备 Lambda 函数

假设你已经能够通过 Kubernetes API 获得 Pod 的 `nodeName`，并且已经配置了 AWS CLI 和 Kubernetes 配置文件，下面是 Lambda 函数的代码，使用 Python 来调用 AWS CLI，查询 Pod 所在 Node 的 EC2 实例 ID。

#### Lambda 函数代码（Python）

```python
import subprocess
import json
import os

def lambda_handler(event, context):
    try:
        # 从事件获取 Node 名称，默认值为 'node-1'
        node_name = event.get('nodeName', 'node-1')

        # 构造 AWS CLI 命令：查询节点的 EC2 实例 ID
        # 我们假设 Kubernetes Node 标签中包含实例 ID 或者你可以通过标签获取。
        # 下面的命令获取指定节点的实例 ID
        command = f"aws ec2 describe-instances --filters Name=tag:KubernetesNode,Values={node_name} --query 'Reservations[*].Instances[*].InstanceId' --output text"

        # 执行命令
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)

        # 获取输出（EC2 实例 ID）
        instance_ids = result.stdout.strip()
        
        # 检查输出并返回实例 ID
        if instance_ids:
            return {
                'statusCode': 200,
                'body': json.dumps({
                    'message': f"Node '{node_name}' is hosted on EC2 instance: {instance_ids}"
                })
            }
        else:
            return {
                'statusCode': 404,
                'body': json.dumps({
                    'message': f"No EC2 instance found for Node '{node_name}'"
                })
            }

    except subprocess.CalledProcessError as e:
        return {
            'statusCode': 500,
            'body': json.dumps({
                'message': 'Failed to execute AWS CLI command.',
                'error': str(e)
            })
        }
```

### 解释：

- **从事件获取 `nodeName`**：Lambda 函数通过传入的事件参数（例如 `nodeName`）来查询指定节点的实例 ID。可以通过 API Gateway 传递 `nodeName` 参数。
  
- **构造 AWS CLI 命令**：我们使用 AWS CLI 命令 `aws ec2 describe-instances`，根据 Kubernetes Node 标签（`KubernetesNode`）过滤实例，获取关联的 EC2 实例 ID。你可以根据实际情况修改标签名称和过滤条件。
  
  命令解析：
  ```bash
  aws ec2 describe-instances \
      --filters Name=tag:KubernetesNode,Values=<node_name> \
      --query 'Reservations[*].Instances[*].InstanceId' \
      --output text
  ```

  - `Name=tag:KubernetesNode,Values=<node_name>`：根据 Node 名称（假设 Kubernetes 为每个 Node 打上了 `KubernetesNode=<node_name>` 标签）过滤 EC2 实例。
  - `--query 'Reservations[*].Instances[*].InstanceId'`：仅提取 EC2 实例 ID。
  - `--output text`：将输出格式设置为文本，方便处理。

- **捕获输出**：通过 `subprocess.run()` 执行命令，并获取输出，即 EC2 实例 ID。

- **错误处理**：如果 AWS CLI 命令执行失败，返回错误信息。

### 步骤 2：在 Lambda 中安装 AWS CLI

Lambda 环境并不默认安装 AWS CLI，因此需要将 AWS CLI 安装到 Lambda 函数中。你可以通过以下两种方式来实现：

1. **使用 Lambda 层（推荐）**：你可以通过 Lambda 层将 AWS CLI 打包并安装到 Lambda 环境中。这样可以避免每次函数执行时重新安装。
2. **打包部署包**：将 AWS CLI 和 Lambda 函数代码一起打包，上传到 Lambda。

### 步骤 3：配置 API Gateway

1. 在 **API Gateway** 控制台中创建一个 **HTTP API**。
2. 配置 **POST** 方法，允许通过 API Gateway 触发 Lambda 函数。
3. 在 API Gateway 中启用 **CORS**，以便允许从 CloudWatch Dashboard 中进行跨域请求。

### 步骤 4：在 CloudWatch Dashboard 中添加查询按钮

在 CloudWatch Dashboards 中，您可以使用 **HTML Widget** 来创建查询按钮，并通过 JavaScript 调用 API Gateway 触发 Lambda 函数执行查询。

#### HTML + JavaScript 示例

```html
<div>
  <button onclick="fetchMetrics()">查询节点实例ID</button>
  <div id="result"></div>
</div>

<script>
  async function fetchMetrics() {
    const nodeName = 'node-1';  // 你可以动态改变此参数
    
    const response = await fetch('https://your-api-id.execute-api.region.amazonaws.com/default/your-lambda-function', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ nodeName: nodeName }),
    });

    const result = await response.json();
    
    // 展示结果
    document.getElementById('result').innerHTML = `<pre>${JSON.stringify(result, null, 2)}</pre>`;
  }
</script>
```

#### 说明：

- **查询按钮**：点击按钮后，`fetchMetrics()` 函数将触发 API 请求，调用 API Gateway 中的 Lambda 函数。
- **API 请求**：`fetchMetrics()` 函数使用 JavaScript 的 `fetch()` 方法向 API Gateway 发送 POST 请求，传递 `nodeName` 参数。
- **显示查询结果**：查询结果（如 EC2 实例 ID）将返回并显示在 CloudWatch Dashboard 中。

### 步骤 5：测试和优化

1. 在 **CloudWatch Dashboard** 中点击查询按钮，验证是否能触发 API 请求并返回查询结果。
2. 如果需要，可以调整 Lambda 函数中的查询逻辑，或者修改 `nodeName` 参数。

### 总结

通过这个流程，您能够：

1. 使用 **AWS CLI** 在 **Lambda** 中查询指定 Kubernetes Pod 所在的 **EC2 Node 实例 ID**。
2. 配置 **API Gateway** 来暴露 Lambda 函数，并允许从 CloudWatch Dashboard 发起查询请求。
3. 在 **CloudWatch Dashboard** 中使用 **HTML Widget** 和 **JavaScript** 实现查询按钮，用户点击按钮后自动查询并展示 Node 实例 ID。

通过这种方式，您可以动态查询 Kubernetes Pod 所在 Node 的 EC2 实例 ID，并将结果直接显示在 CloudWatch Dashboard 中。
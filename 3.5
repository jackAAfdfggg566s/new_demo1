如果在 GitLab CI 中运行脚本时使用数组定义报错，通常是因为 GitLab CI Runner 默认使用的是 sh，而 sh 不支持 bash 中的数组语法。在 sh 中没有原生的数组支持，所以需要使用不同的方式来处理。

目标：使用兼容 sh 的方式改写数组操作

1. 避免使用数组语法

在 sh 中，数组元素可以通过位置参数 ($1, $2, ...) 或通过手动赋值来模拟。你可以将数组元素存储为变量并通过位置参数来处理。

方案：使用位置参数来模拟数组

下面是一个改写的示例，使用位置参数模拟数组：

#!/bin/sh

# 模拟数组（使用位置参数）
set -- "apple" "banana" "cherry"  # 设置位置参数，相当于数组元素

length=$#  # 获取位置参数的个数，作为数组的长度

# 使用 while 循环遍历位置参数
i=0
while [ $i -lt $length ]; do
    echo "索引 $i: ${!i}"  # 使用位置参数来访问
    i=$((i + 1))
done

解释：

1. set -- "apple" "banana" "cherry"：这将三个元素设置为位置参数 ($1, $2, $3)，可以像数组一样通过 $1、$2、$3 来访问。


2. length=$#：$# 返回位置参数的数量，相当于数组的长度。


3. ${!i}：在 sh 中，${!i} 作为位置参数的引用语法，可以用来动态访问位置参数（相当于数组元素）。



2. 手动赋值

如果你更喜欢手动管理元素，可以通过设置不同的变量来模拟数组。

#!/bin/sh

# 模拟数组元素
apple="apple"
banana="banana"
cherry="cherry"
length=3

# 使用 while 循环访问这些元素
i=0
while [ $i -lt $length ]; do
    case $i in
        0) echo "索引 $i: $apple" ;;
        1) echo "索引 $i: $banana" ;;
        2) echo "索引 $i: $cherry" ;;
    esac
    i=$((i + 1))
done

3. 总结

sh 不支持 bash 的数组语法（如 arr=("apple" "banana" "cherry")）。

使用 set 来设置位置参数，模拟数组的效果，或者直接使用变量来模拟数组。

使用 while 循环或 case 语句来遍历数组元素。


这种方法使得脚本能够兼容 sh，并且在 GitLab CI 中运行时不会报错。


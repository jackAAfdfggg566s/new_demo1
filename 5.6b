在 Ansible Playbook 中，如果日志文件名是由远程 Shell 脚本动态生成的（例如包含时间戳或随机字符串），可以通过以下方法获取文件名并实时 `tail` 日志内容：

---

### **方法 1：让 Shell 脚本返回日志路径**
修改你的脚本，让其输出日志文件路径（例如写入一个临时文件或直接打印路径）：

#### **Shell 脚本示例 (`your_script.sh`)**
```bash
#!/bin/bash
LOG_FILE="/tmp/script_$(date +%Y%m%d_%H%M%S).log"
echo "Starting script, logs at: $LOG_FILE"
# 将日志路径写入一个固定位置的文件（供 Ansible 读取）
echo "$LOG_FILE" > /tmp/script_log_path.txt
# 实际任务（后台运行，但日志重定向到动态文件）
your_command > "$LOG_FILE" 2>&1 &
```

#### **Ansible Playbook 任务**
```yaml
- name: Run script and get dynamic log path
  ansible.builtin.shell: |
    /path/to/your_script.sh
    cat /tmp/script_log_path.txt  # 读取脚本生成的日志路径
  register: log_path_result

- name: Tail the dynamic log file
  ansible.builtin.shell: "tail -f {{ log_path_result.stdout }}"
  register: tail_output
  # 持续 tail 直到匹配终止条件（例如日志中出现特定关键词）
  until: tail_output.stdout.find("Script completed") != -1
  retries: 60
  delay: 5
  ignore_errors: yes
```

---

### **方法 2：通过 Ansible 解析脚本输出**
如果脚本直接打印了日志路径（而非写入文件），可以用 Ansible 捕获输出并提取路径：

#### **Shell 脚本示例**
```bash
#!/bin/bash
LOG_FILE="/tmp/script_$(date +%s).log"
echo "LOG_FILE=$LOG_FILE"  # 输出可解析的格式
your_command > "$LOG_FILE" 2>&1 &
```

#### **Ansible Playbook 任务**
```yaml
- name: Run script and capture log path
  ansible.builtin.shell: /path/to/your_script.sh
  register: script_output
  args:
    executable: /bin/bash

- name: Extract log path from script output
  ansible.builtin.set_fact:
    log_path: "{{ script_output.stdout | regex_search('LOG_FILE=(.*)', '\\1') | first }}"

- name: Tail the extracted log file
  ansible.builtin.shell: "tail -f {{ log_path }}"
  register: tail_result
  async: 300
  poll: 5
```

---

### **方法 3：通过临时文件通配符匹配**
如果脚本的日志文件名有固定前缀（如 `/tmp/script_*.log`），可以用 Ansible 的 `find` 模块获取最新文件：

```yaml
- name: Find the latest log file
  ansible.builtin.find:
    paths: /tmp
    patterns: "script_*.log"
    age: "1m"  # 只找 1 分钟内修改过的文件（避免旧文件干扰）
  register: found_logs

- name: Set log path to the newest file
  ansible.builtin.set_fact:
    log_path: "{{ (found_logs.files | sort(attribute='mtime')[-1].path }}"

- name: Tail the latest log
  ansible.builtin.shell: "tail -f {{ log_path }}"
```

---

### **关键点**
1. **脚本需主动暴露日志路径**：  
   通过写入固定位置的文件、打印到标准输出或使用可预测的文件命名规则。

2. **Ansible 需动态获取路径**：  
   用 `set_fact` 存储变量，后续任务通过 `{{ log_path }}` 引用。

3. **避免竞争条件**：  
   在 `tail` 前确保脚本已创建日志文件（可加 `sleep 2` 或轮询检查文件是否存在）。

4. **超时管理**：  
   对长时间运行的 `tail` 任务设置 `async` 和 `poll`，防止 Ansible 超时。

---

### **完整 GitLab CI/CD 示例**
```yaml
deploy:
  stage: deploy
  script:
    - ansible-playbook -i inventory.ini playbook.yml
  artifacts:
    paths:
      - ansible_logs/  # 可选：保存日志文件
```
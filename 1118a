要实现**自动化**地在AWS CloudWatch大盘中展示Kubernetes Pod所属Node的实例ID，下面是一个更详细的步骤，涵盖自动化部署、数据收集和大盘显示：

### 1. **确保Kubernetes集群与CloudWatch集成**

首先，确保你的Kubernetes集群已经和AWS CloudWatch集成。可以通过以下两种方式之一：

- **使用CloudWatch Agent**：为每个Node配置`CloudWatch Agent`，将Node的实例ID与Pod的运行节点信息发送到CloudWatch。
- **使用CloudWatch Container Insights**：通过启用CloudWatch Container Insights来自动收集Kubernetes集群的节点、Pod、容器和EC2实例的信息。

#### **推荐做法：启用CloudWatch Container Insights**

`Container Insights`可以自动收集Kubernetes集群和节点的相关信息。它包括对Kubernetes资源（如Pod、Node）及其关联的EC2实例（例如实例ID）的监控。

##### **步骤：启用CloudWatch Container Insights**

1. **启用Container Insights（如果尚未启用）**：
   你可以在EKS控制台启用Container Insights，或者在`eksctl`和`kubectl`命令行工具中进行配置。以下是通过`eksctl`启用Container Insights的命令：

   ```bash
   eksctl utils associate-iam-oidc-provider --region <region> --cluster <cluster_name> --approve
   eksctl create iamserviceaccount \
     --region <region> \
     --name cloudwatch-agent \
     --namespace kube-system \
     --cluster <cluster_name> \
     --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy \
     --approve
   ```

2. **安装CloudWatch Agent和Container Insights**：
   通过`kubectl`命令部署CloudWatch Agent和Container Insights：

   ```bash
   kubectl apply -f https://raw.githubusercontent.com/aws/amazon-cloudwatch-agent/refs/eks-container-insights/cloudwatch-agent-configmap.yaml
   ```

3. **查看容器监控**：
   容器的CPU、内存、磁盘等指标会通过CloudWatch Container Insights自动收集。

### 2. **自动化Pod与Node实例ID映射**

Kubernetes中的`Pod`与`Node`的映射关系可以通过**Pod的`nodeName`**字段或**Node的标签**来获取。要自动化获取这些数据并上传到CloudWatch，可以采取以下步骤：

#### **自动化步骤：创建CloudWatch自定义指标**

你可以通过一个自动化脚本或DaemonSet将Pod与Node的实例ID数据收集并上传到CloudWatch。

##### **自动化脚本（使用Kubernetes API）**

1. 创建一个Kubernetes **DaemonSet**，让每个Node上都运行一个Pod来自动获取该Node的实例ID。
2. 该Pod可以通过AWS EC2 Metadata API获取实例ID，并将这些数据发送到CloudWatch作为自定义指标。

##### **DaemonSet 示例**

```yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cloudwatch-metadata-collector
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: cloudwatch-metadata-collector
  template:
    metadata:
      labels:
        name: cloudwatch-metadata-collector
    spec:
      containers:
      - name: metadata-collector
        image: amazonlinux:latest
        command: ["/bin/bash", "-c", "while true; do instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id); aws cloudwatch put-metric-data --namespace 'Kubernetes' --metric-name 'PodNodeInstanceID' --dimensions InstanceID=$instance_id,NodeName=$(hostname) --value 1 --region <region>; sleep 60; done"]
        resources:
          limits:
            cpu: "100m"
            memory: "100Mi"
        env:
        - name: AWS_DEFAULT_REGION
          value: "<region>"
```

这个DaemonSet会在每个Node上启动一个Pod，该Pod通过EC2元数据API获取实例ID，并通过`aws-cli`将数据发送到CloudWatch作为自定义指标。

- `InstanceID`: Node的EC2实例ID。
- `NodeName`: Node的名称，通常与Pod的`nodeName`一致。

#### **分析数据：**

这个DaemonSet会定期将每个Node的实例ID（以及Node名称）作为CloudWatch自定义指标发送到CloudWatch。你可以在CloudWatch中查看这些指标。

### 3. **创建CloudWatch大盘**

1. **登录CloudWatch控制台**。
2. 选择左侧菜单中的**Dashboards**，然后点击**Create dashboard**，创建一个新的大盘。
3. 在新大盘中添加一个**Metric Widget**，选择**Kubernetes**命名空间，然后选择刚刚上传的自定义指标（例如`PodNodeInstanceID`）。
4. 你可以根据`InstanceID`和`NodeName`的维度进行筛选和分组，以便展示每个Pod所属Node的EC2实例ID。

### 4. **可视化Pod与Node关系**

在CloudWatch大盘中，可以通过选择**Metric**类型的小部件来展示每个Node的EC2实例ID。利用如下方式来配置：

- 在**CloudWatch大盘**中选择你定义的**PodNodeInstanceID**自定义指标。
- 通过维度选择**InstanceID**（EC2实例ID）和**NodeName**（Kubernetes节点名称）。
- 你可以通过这些维度展示**Pod到Node的映射关系**。

例如，可以创建一个图表来展示每个Node的实例ID，以及它上面运行的Pod的数量。

### 5. **自动化监控与告警**

你可以为CloudWatch中的这些自定义指标创建告警。比如：

- 当某个Node的实例ID异常时（例如实例ID发生变化），你可以设置告警并触发自动化的响应操作。
- 可以配置告警来监控Pod部署的分布情况，或者Node的健康状态。

### 总结

通过上述步骤，你实现了自动化地收集和展示Kubernetes中Pod所属Node的EC2实例ID。具体来说：

1. 使用CloudWatch Container Insights监控Kubernetes集群的指标。
2. 通过DaemonSet和自定义指标自动化收集Pod与Node实例ID的信息。
3. 在CloudWatch控制台创建一个大盘，将Pod与Node的关系可视化。
4. 可选地为这些指标设置告警，确保系统的健康状态。
好，明确了 ✅Java 程序是运行在远端机器上，你在 GitLab CI 本地 Runner 上触发这个流程。


---

✅ 目标回顾：

1. GitLab CI/CD 本地 runner 启动脚本，通过 sshpass 或 ssh 到远端机器：

启动 java -jar xxx.jar，并后台运行，记录 PID。



2. 持续在 GitLab CI 端轮询远端：

Java 进程是否还在（通过 kill -0 检查远程 PID 文件）。

如果 Java 进程退出，就去远程查看日志是否包含 "运行成功"。

满足则 exit 0，否则 exit 1。



3. 最终结果：在 GitLab pipeline 中控制 job 成功或失败。




---

✅ 一键执行脚本（GitLab 本地执行）

命名：remote_run_and_monitor_java.sh

#!/bin/bash

# 配置部分：请根据你的环境修改
REMOTE_USER="your_user"
REMOTE_HOST="your.host.com"
REMOTE_PASS="your_password"
JAR_PATH="/remote/path/to/app.jar"
LOG_PATH="/remote/path/to/output.log"
PID_FILE="/tmp/java_app.pid"
SUCCESS_KEY="运行成功"
MAX_WAIT_MINUTES=90
CHECK_INTERVAL=30

# 启动 Java 应用（远程）
echo "🚀 远程启动 Java 应用..."
sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "
  nohup java -jar $JAR_PATH > $LOG_PATH 2>&1 &
  echo \$! > $PID_FILE
"

echo "✅ Java 已启动，开始监控远程进程..."

# 开始循环监控
elapsed=0
while [ $elapsed -lt $((MAX_WAIT_MINUTES * 60)) ]; do
  sleep $CHECK_INTERVAL
  elapsed=$((elapsed + CHECK_INTERVAL))

  IS_ALIVE=$(sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "kill -0 \$(cat $PID_FILE) 2>/dev/null && echo alive || echo dead")

  if [ "$IS_ALIVE" = "alive" ]; then
    echo "🟢 Java 仍在运行...（$elapsed 秒）"
  else
    echo "⚠️ Java 进程已退出，检查日志是否成功..."

    LOG_HAS_SUCCESS=$(sshpass -p "$REMOTE_PASS" ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "grep -q '$SUCCESS_KEY' $LOG_PATH && echo yes || echo no")

    if [ "$LOG_HAS_SUCCESS" = "yes" ]; then
      echo "✅ 日志中发现成功标志，任务完成！"
      exit 0
    else
      echo "❌ 日志中未发现成功标志，任务失败！"
      exit 1
    fi
  fi
done

echo "⏰ 超时 ${MAX_WAIT_MINUTES} 分钟，任务失败。"
exit 1


---

✅ .gitlab-ci.yml 用法示例：

stages:
  - run

run_java_remote:
  stage: run
  script:
    - chmod +x remote_run_and_monitor_java.sh
    - ./remote_run_and_monitor_java.sh


---

✅ 说明

项目	说明

sshpass	用于非交互式 SSH 登录远端
nohup	远程后台运行 Java
PID_FILE	写在远程机器的 /tmp/java_app.pid
kill -0	检查 PID 是否还活着
grep	检查远程日志是否成功完成



---

🔐 安全提示

可以将远程用户密码改为 SSH 密钥登录，更安全（否则密码写在 GitLab 配置中）

StrictHostKeyChecking=no 是为了避免初次 SSH 报 yes/no 提示



---

✅ 可选增强

加入日志失败关键字判断，如 Exception、ERROR

支持多个 JAR 启动监控

超时时间作为参数传入

改成 Python 实现 + 多机并发支持



---

你可以告诉我：

远端机器用密码还是密钥？

是每次都要重新部署 JAR 吗？是否需要 scp 上传？

成功关键字是中文 "运行成功" 还是英文？


我可以帮你进一步定制脚本。


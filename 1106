为了使用 PowerShell 启动 Java 程序，您需要通过以下步骤执行 Maven 构建命令并运行 Java 程序。根据您的要求，假设您已经在项目中构建了 Maven 项目，并且构建文件已经生成在 target 目录中。

下面是一个 PowerShell 脚本示例，展示如何通过 Maven 命令构建项目，然后使用 java -cp 启动程序。

PowerShell 脚本：启动 Java Glitching 程序
powershell
复制代码
# 设置项目路径
$projectPath = "C:\path\to\your\project"  # 请根据实际路径修改

# 设置 Java 类路径
$targetPath = "$projectPath\target"  # Maven 构建的输出目录
$mainClass = "com.example.Main"  # 请替换为您的 Java 主类路径

# 切换到项目目录
Set-Location -Path $projectPath

# Step 1: 使用 Maven 构建项目
Write-Host "Building the project using Maven..."
mvn clean install

# 检查构建是否成功
if ($LASTEXITCODE -ne 0) {
    Write-Host "Maven build failed. Exiting script."
    exit 1
}

# Step 2: 切换到 target 目录
Set-Location -Path $targetPath

# Step 3: 使用 Java 启动程序
Write-Host "Starting the Java program..."

# 使用 Maven 构建生成的 jar 文件
$jarFile = Get-ChildItem -Filter "*.jar" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
if ($jarFile -eq $null) {
    Write-Host "No JAR file found in the target directory. Exiting script."
    exit 1
}

# 构建 Java 命令，运行 Java 程序
$javaCmd = "java -cp $jarFile.FullName $mainClass"
Write-Host "Running command: $javaCmd"

# 执行 Java 命令
Invoke-Expression $javaCmd
脚本解析：
设置项目路径：

$projectPath 是您本地 Maven 项目的路径。根据您的实际项目路径修改此变量。
设置 Java 类路径：

$targetPath 设置为构建后的 target 目录，target 目录通常包含编译后的 .jar 文件。
$mainClass 设置为 Java 程序的主类路径，替换为您的程序入口类。
切换到项目目录：

使用 Set-Location 命令切换到指定的项目目录，以确保 Maven 命令在正确的路径下执行。
执行 Maven 构建：

mvn clean install 命令会清理并构建 Maven 项目，生成 .jar 文件。如果构建失败（$LASTEXITCODE 非零），脚本会退出。
切换到 target 目录：

构建完成后，脚本会切换到 target 目录，以便找到生成的 .jar 文件。
查找 .jar 文件并启动 Java 程序：

使用 Get-ChildItem 查找 target 目录中的 .jar 文件，并选择最新的一个（根据文件的 LastWriteTime 排序）。然后构建 Java 命令，使用 java -cp 启动该程序。
执行 Java 程序：

使用 Invoke-Expression 执行构建的 Java 启动命令，运行 Java 程序。
使用说明：
请根据您的实际项目路径替换 $projectPath。
根据您的 Java 程序的主类路径替换 $mainClass（例如 com.example.Main）。
执行 PowerShell 脚本时，确保您已安装 Maven 和 Java，并且可以从命令行执行 mvn 和 java 命令。
示例执行：
假设您的项目路径是 C:\projects\glitching-program，并且主类是 com.example.Main，您可以这样调用 PowerShell 脚本：

powershell
复制代码
.\start-java-program.ps1
该脚本会自动使用 Maven 构建项目，并启动最新构建的 JAR 文件。
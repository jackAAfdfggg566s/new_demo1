在 GitLab CI/CD 中使用 SSH 登录，并且通过 RSA 私钥进行身份验证的步骤如下：

1. 生成 SSH 密钥对

首先，你需要在本地生成一对 SSH 密钥（公钥和私钥）。可以使用以下命令生成 RSA 密钥对：

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

这将生成一个 4096 位的 RSA 密钥对，公钥和私钥会保存在默认位置，通常是 ~/.ssh/id_rsa 和 ~/.ssh/id_rsa.pub。

2. 将公钥添加到 GitLab 的 SSH 设置

接下来，登录到 GitLab 并添加 SSH 公钥到 GitLab 中。

在 GitLab 中，点击你的头像，选择 Settings（设置）。

在左侧菜单中，选择 SSH Keys。

打开你本地的公钥文件（默认是 ~/.ssh/id_rsa.pub），复制其内容。

在 GitLab 的 Key 栏中粘贴你的公钥，并给它一个名称（例如：CI/CD Key），然后点击 Add key。


3. 将私钥添加到 GitLab CI/CD

为了在 GitLab CI/CD 中使用 SSH 登录，你需要将私钥添加到 GitLab 的 CI/CD 环境变量中。

打开 GitLab 项目的 Settings（设置）。

选择 CI / CD > Variables（变量）。

点击 Add Variable（添加变量），然后输入以下内容：

Key: SSH_PRIVATE_KEY

Value: 将你的私钥内容粘贴到这个字段中，确保没有空格或换行符。

Type: 选择 File，这样私钥将会作为文件存储在 CI/CD 过程中。



> 请注意，确保你添加的私钥内容没有额外的空格或换行符。



4. 在 .gitlab-ci.yml 文件中配置 SSH

在你的 GitLab CI 配置文件 .gitlab-ci.yml 中，使用 before_script 或其他适当的位置来配置 SSH 环境，加载私钥，并配置 GitLab CI 使用它进行 SSH 登录。

stages:
  - deploy

deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa  # 设置私钥权限
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts  # 添加目标服务器的公钥到已知主机
    - ssh -o StrictHostKeyChecking=no user@hostname "your-command-here"  # 使用 SSH 连接并执行命令
  only:
    - main

5. 解释 .gitlab-ci.yml 中的配置

mkdir -p ~/.ssh: 创建 .ssh 目录，用于存放 SSH 密钥文件。

echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa: 将在 GitLab CI 中添加的私钥变量内容写入到 id_rsa 文件中。

chmod 600 ~/.ssh/id_rsa: 设置私钥文件的权限为只读。

ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts: 通过 ssh-keyscan 获取目标主机（例如 GitHub 或其他服务器）的公钥，并将其添加到 known_hosts 文件中。这是为了防止 SSH 提示是否信任目标主机。

ssh -o StrictHostKeyChecking=no user@hostname "your-command-here": 使用 SSH 连接到目标主机，并执行相应的命令。


6. 验证

确保你的 GitLab CI/CD pipeline 配置正确并且能够成功连接到目标服务器。每次执行 CI/CD 时，GitLab 会使用存储的私钥通过 SSH 登录并执行指定的命令。

注意：

确保私钥没有额外的空格或换行符，避免出错。

如果目标服务器使用其他端口或有特殊配置，确保在 ssh 命令中使用适当的选项（如 -p 指定端口号）。


通过以上步骤，你可以在 GitLab CI/CD 中使用 RSA 私钥进行 SSH 登录，自动化执行部署等任务。


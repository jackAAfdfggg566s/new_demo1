是的，您可以通过 **AWS Lambda** 来在需要时调用和查询Kubernetes集群的Pod所在的Node名称，并将其推送到CloudWatch。这种方式可以按需触发 Lambda 函数来获取数据，而不是持续不断地收集数据。

### 思路：
- 通过 Lambda 函数动态查询 Kubernetes 集群中的 Pod 与 Node 的映射信息。
- 将这些数据作为自定义指标发送到 **CloudWatch**。
- 可以配置 AWS API Gateway 或其他触发器，在需要时调用 Lambda 函数获取实时数据。

### 实现步骤：

#### 步骤 1：创建 Lambda 函数

Lambda 函数的职责是：
1. 连接 Kubernetes 集群（通过 Kubernetes API）。
2. 获取 Pod 与 Node 的映射数据。
3. 将数据推送到 CloudWatch。

##### 1.1 编写 Lambda 函数代码（Python）

假设您使用 **Python** 来编写 Lambda 函数，以下是代码示例：

```python
import boto3
import kubernetes
from kubernetes import client, config
import json

# 配置CloudWatch客户端
cloudwatch = boto3.client('cloudwatch')

def lambda_handler(event, context):
    # 加载Kubernetes配置（假设Lambda已经通过IAM权限访问EKS集群）
    config.load_kube_config()  # 如果是在EKS外部运行Lambda，可以用 kubeconfig 配置

    # 获取Kubernetes API客户端
    v1 = client.CoreV1Api()

    # 获取所有Pod信息
    pods = v1.list_pod_for_all_namespaces(watch=False)

    # 创建一个结果列表
    metrics = []

    # 遍历所有Pod并准备推送到CloudWatch
    for pod in pods.items:
        node_name = pod.spec.node_name
        pod_name = pod.metadata.name
        namespace = pod.metadata.namespace

        if node_name:
            metrics.append({
                'MetricName': 'NodeName',
                'Dimensions': [
                    {
                        'Name': 'PodName',
                        'Value': pod_name
                    },
                    {
                        'Name': 'Namespace',
                        'Value': namespace
                    },
                ],
                'Value': 1,
                'Unit': 'Count',
                'StorageResolution': 60,  # 分辨率为1分钟
            })
    
    if metrics:
        # 推送到CloudWatch
        cloudwatch.put_metric_data(
            Namespace='Kubernetes/Pods',
            MetricData=metrics
        )

    return {
        'statusCode': 200,
        'body': json.dumps('Successfully pushed metrics to CloudWatch')
    }
```

##### 代码解析：
- **Kubernetes API**：通过 `kubernetes` Python 库连接 Kubernetes 集群，查询所有 Pod 信息并提取每个 Pod 的 `node_name`。
- **CloudWatch API**：使用 `boto3` 库将获取的 Pod 和 Node 信息作为自定义指标推送到 AWS CloudWatch。
- **Lambda 触发器**：该 Lambda 函数将通过外部调用来触发（例如，通过 AWS API Gateway 或定时触发器）。

#### 步骤 2：配置 Lambda 函数权限
确保 Lambda 函数具有以下权限：
- **Kubernetes 权限**：Lambda 需要能够访问 Kubernetes API（如使用 EKS 集群时，确保 Lambda 函数有权限访问 EKS）。
- **CloudWatch 权限**：Lambda 需要有权限将数据推送到 CloudWatch。可以附加 `CloudWatchFullAccess` 权限，或者一个只包含 `PutMetricData` 权限的自定义 IAM 策略。

#### 步骤 3：配置触发 Lambda 函数

##### 3.1 使用 API Gateway 触发 Lambda

1. 创建一个 **API Gateway** REST API，配置一个 `GET` 请求接口，调用 Lambda 函数。
2. 配置 API Gateway，将触发 API 调用时执行 Lambda 函数。
3. 使用 API Gateway 的 URL 在需要时手动调用 Lambda 函数。

##### 3.2 使用 CloudWatch Events 定时触发（可选）

如果您希望定期拉取 Pod 和 Node 数据（例如每小时或每天），可以配置一个 **CloudWatch Event** 来定时触发 Lambda 函数。

1. 创建一个 CloudWatch Events 规则，设置触发频率（例如，设置为每小时）。
2. 在规则中选择您的 Lambda 函数作为目标。

#### 步骤 4：在 CloudWatch 中查看指标

1. 登录到 **AWS CloudWatch** 控制台。
2. 在 **Metrics** 部分，选择 **Kubernetes/Pods** 命名空间。
3. 您可以根据 `PodName` 和 `NodeName` 维度查看每个 Pod 所在的 Node 名称。

#### 步骤 5：测试 Lambda 函数

通过以下方式之一调用 Lambda 函数：

1. **通过 API Gateway**：使用浏览器或 Postman 等工具发送 HTTP 请求触发 Lambda 函数。
2. **通过 CloudWatch Events**：如果配置了定时触发，Lambda 将自动按计划触发。

### 总结

您可以通过 AWS Lambda 按需查询 Kubernetes 中的 Pod 与 Node 的映射信息，并将这些信息实时推送到 AWS CloudWatch。通过使用 **API Gateway** 或 **CloudWatch Events** 触发 Lambda 函数，您可以灵活地控制何时获取并推送数据。这样，不仅能减少持续监控的开销，还能在需要时实时获取 Pod 所在的 Node 信息。
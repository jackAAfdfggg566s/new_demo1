要通过 Shell 脚本运行 Java 程序，并传入不同的参数，还需要使用配置文件来管理这些参数，可以按以下步骤进行操作：

### 1. **创建配置文件**
首先，创建一个配置文件 `config.cfg`，用于存储不同的参数（如类路径、JVM 参数、传递给 Java 程序的参数等）。可以使用简单的键值对格式来存储这些配置项。

#### 示例配置文件 `config.cfg`：

```bash
# config.cfg

# Java 类路径
JAVA_CLASSPATH="/path/to/classes:/path/to/libs/*"

# JVM 参数
JVM_OPTS="-Xms512m -Xmx1024m"

# Java 程序参数
PROGRAM_ARGS="arg1 arg2 arg3"

# Java 主类名
MAIN_CLASS="com.example.Main"
```

### 2. **编写 Shell 脚本**
接下来，创建一个 Shell 脚本来加载这些配置项并运行 Java 程序。

#### 示例 Shell 脚本 `run_java.sh`：

```bash
#!/bin/bash

# 加载配置文件
source config.cfg

# 输出配置信息（可选，用于调试）
echo "JAVA_CLASSPATH: $JAVA_CLASSPATH"
echo "JVM_OPTS: $JVM_OPTS"
echo "PROGRAM_ARGS: $PROGRAM_ARGS"
echo "MAIN_CLASS: $MAIN_CLASS"

# 执行 Java 程序
java $JVM_OPTS -cp $JAVA_CLASSPATH $MAIN_CLASS $PROGRAM_ARGS
```

### 3. **详细说明**
- `source config.cfg`：这行命令会加载配置文件 `config.cfg`，将文件中的变量导入到当前的 Shell 环境中。
- `JAVA_CLASSPATH`：这是 Java 类路径，它指定了 Java 程序需要加载的类和库的位置。使用 `:` 分隔多个路径（Linux 和 macOS）或 `;`（Windows）。
- `JVM_OPTS`：这些是传递给 JVM 的参数，如堆内存大小（`-Xms` 和 `-Xmx`）。
- `PROGRAM_ARGS`：这是传递给 Java 程序的命令行参数。
- `MAIN_CLASS`：这是 Java 程序的主类。

### 4. **运行 Shell 脚本**
在终端中赋予脚本执行权限，并执行脚本：

```bash
chmod +x run_java.sh
./run_java.sh
```

### 5. **修改配置文件**
如果你需要改变 Java 程序的参数，只需编辑 `config.cfg` 文件，修改相应的值即可。然后再运行 `run_java.sh` 脚本，它会自动加载新的配置。

#### 示例修改后的 `config.cfg`：

```bash
# 修改后的配置

# 更新的类路径
JAVA_CLASSPATH="/path/to/other/classes:/path/to/other/libs/*"

# 更改 JVM 参数
JVM_OPTS="-Xms1g -Xmx2g"

# 修改程序参数
PROGRAM_ARGS="newArg1 newArg2 newArg3"

# 更改主类
MAIN_CLASS="com.example.NewMain"
```

### 总结：
1. **配置文件**：通过 `config.cfg` 来管理所有的参数，使得每次修改参数时不需要直接修改脚本。
2. **Shell 脚本**：`run_java.sh` 脚本加载配置文件，并用配置中的参数运行 Java 程序。

这种方式不仅灵活，还能在不同环境中方便地配置和调整 Java 程序的运行参数。
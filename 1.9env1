如果你是在 GitLab CI/CD 的 Pipeline 中运行 Ansible Playbook，并且需要将 AWS 的环境变量传递给远程服务器，然后通过 Ansible 执行远程脚本或命令，下面是一个详细的步骤和配置指南。

场景描述

你希望在 GitLab CI/CD 中通过 Ansible Playbook 运行远程服务器上的脚本，并且需要配置 AWS 环境变量（如 AWS_ACCESS_KEY_ID 和 AWS_SECRET_ACCESS_KEY），然后将这些环境变量传递给远程服务器，以便在远程机器上执行 AWS CLI 命令。

1. 在 GitLab 中配置 AWS 环境变量

首先，你需要在 GitLab 中设置 AWS 环境变量。这可以通过 GitLab 项目中的 CI/CD 设置中的 Variables 来完成。

1. 进入 GitLab 项目的页面，点击左侧菜单中的 Settings -> CI / CD。


2. 展开 Variables 部分，添加以下环境变量：

AWS_ACCESS_KEY_ID

AWS_SECRET_ACCESS_KEY

AWS_DEFAULT_REGION（可选）




GitLab CI/CD Runner 将自动将这些变量传递给所有运行的 job。

2. 在 .gitlab-ci.yml 中配置 Ansible Playbook 执行

假设你已经配置好了 AWS 环境变量，接下来可以在 .gitlab-ci.yml 文件中配置 Ansible Playbook，确保 AWS 凭证传递到远程服务器。

示例 .gitlab-ci.yml

stages:
  - deploy

deploy:
  stage: deploy
  script:
    - echo "Setting up AWS credentials..."
    - ansible-playbook -i inventory/hosts deploy.yml

3. 在 Ansible Playbook 中配置 AWS 环境变量

假设你有一个名为 deploy.yml 的 Ansible Playbook，它需要通过远程 SSH 执行脚本。在 Playbook 中，你可以使用 environment 关键字来设置 AWS 环境变量。

示例 deploy.yml（Ansible Playbook）

---
- name: Deploy to remote server and configure AWS
  hosts: all
  become: yes
  tasks:
    - name: Set up AWS credentials as environment variables
      ansible.builtin.shell: |
        echo "Setting AWS credentials..."
        export AWS_ACCESS_KEY_ID={{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
        export AWS_SECRET_ACCESS_KEY={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
        export AWS_DEFAULT_REGION={{ lookup('env', 'AWS_DEFAULT_REGION') }}
        aws s3 ls  # Example AWS command to validate credentials
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        AWS_DEFAULT_REGION: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"

    - name: Run the remote script
      ansible.builtin.shell: |
        echo "Running remote script..."
        ./deploy_script.sh

解释：

1. environment 参数：在 ansible-playbook 中，使用 environment 来传递环境变量。这会将 GitLab CI/CD 中的环境变量（AWS_ACCESS_KEY_ID、AWS_SECRET_ACCESS_KEY 和 AWS_DEFAULT_REGION）传递到远程主机。


2. lookup('env', 'VARIABLE_NAME')：这是 Ansible 的内建函数，用来从系统环境中获取变量的值。在这个例子中，我们通过 lookup('env', 'AWS_ACCESS_KEY_ID') 和其他 AWS 环境变量来确保它们在远程主机上可用。


3. 执行 AWS 命令：在远程主机上，执行 aws s3 ls 或其他 AWS CLI 命令来验证 AWS 凭证是否正确设置。


4. 运行远程脚本：最后，Ansible 会通过 ansible.builtin.shell 模块在远程服务器上运行你的脚本（如 ./deploy_script.sh）。



4. 确保 Ansible 使用 SSH 连接远程服务器

你的 GitLab CI/CD Runner 需要能够通过 SSH 连接到远程服务器。你可以在 GitLab CI 配置文件中通过 SSH 密钥或密码进行身份验证。

确保你在 GitLab 项目的 CI/CD 配置中设置了 SSH 密钥，并且将 ansible.cfg 配置文件中指定了正确的 SSH 密钥路径。

示例 ansible.cfg

[defaults]
private_key_file = /path/to/your/private/key
host_key_checking = False

你可以在 GitLab CI/CD 中通过 ssh-agent 或其他方式加载 SSH 密钥来实现自动化 SSH 登录。

5. 执行和验证

一旦你设置好了 AWS 环境变量和 Ansible Playbook，GitLab CI/CD 会自动运行这个过程：

在 deploy 阶段，GitLab CI/CD 会通过 ansible-playbook 执行 Playbook，并将 AWS 环境变量传递到远程服务器。

远程服务器上的 AWS 凭证被配置并可以使用，AWS CLI 命令（如 aws s3 ls）可以成功执行。

然后，Ansible 会继续执行远程脚本（如 deploy_script.sh）。


总结

在 GitLab CI/CD 中通过设置环境变量传递 AWS 凭证。

在 Ansible Playbook 中使用 environment 关键字传递 AWS 环境变量。

使用 lookup('env', 'VARIABLE_NAME') 来访问环境变量。

通过 SSH 连接远程服务器并执行 AWS 相关命令。


这种方式让你能够在 GitLab CI/CD pipeline 中灵活地传递和使用 AWS 凭证，同时确保远程服务器能够通过 Ansible 执行相应的脚本。


啊哈👌，你是说配置文件里全是参数行，没有 [java] / [log] 这种区分段落。
也就是说，配置文件就是一堆：

java_home=/usr/bin/java
jar_file=/path/to/myapp.jar
args=--spring.profiles.active=prod
loadtime=30
peak=100
mode=fast
log_file=/path/to/myapp.log
check_field=Started Application
backup_dir=/backup/logs
pid_log=/var/run/myapp.pid

这种形式。

那这种情况用 configparser 就不合适了（它要求有 section），我们可以用 简单的 key=value 文件解析。


---

Python 脚本（无 section，直接解析 key=value）

import os
import subprocess
import shutil
import time

# 1. 读取配置文件（简单 key=value）
config = {}
with open("config.ini", "r") as f:
    for line in f:
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        if "=" in line:
            key, value = line.split("=", 1)
            config[key.strip()] = value.strip()

# 2. 取固定参数
java_home = config["java_home"]
jar_file = config["jar_file"]
args = config.get("args", "")

log_file = config["log_file"]
check_field = config["check_field"]
backup_dir = config["backup_dir"]
pid_log = config["pid_log"]

# 3. 组装 -D 参数（除去固定字段）
java_opts = []
for key, value in config.items():
    if key not in ["java_home", "jar_file", "args", "log_file", "check_field", "backup_dir", "pid_log"]:
        java_opts.append(f"-D{key}={value}")

# 4. 拼接命令
java_opts_str = " ".join(java_opts)
cmd = f"{java_home} {java_opts_str} -jar {jar_file} {args}"
print(f"启动命令: {cmd}")

# 5. 启动 Java 程序
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
pid = proc.pid
print(f"Java 程序已启动, PID={pid}")

# 6. 保存 PID
with open(pid_log, "w") as f:
    f.write(str(pid))

# 7. 等待日志并检查字段
field_exists = False
for _ in range(30):  # 最多检查 30 次（约 30 秒）
    time.sleep(1)
    if os.path.exists(log_file):
        with open(log_file, "r") as f:
            for line in f:
                if check_field in line:
                    field_exists = True
                    break
    if field_exists:
        break

print(f"字段检查结果: {field_exists}")

# 8. 拷贝日志文件
if os.path.exists(log_file):
    os.makedirs(backup_dir, exist_ok=True)
    shutil.copy(log_file, backup_dir)
    print(f"日志已拷贝到 {backup_dir}")
else:
    print("日志文件不存在，无法拷贝。")


---

✅ 使用效果

配置文件：

java_home=/usr/bin/java
jar_file=/path/to/myapp.jar
args=--spring.profiles.active=prod
loadtime=30
peak=100
mode=fast
log_file=/path/to/myapp.log
check_field=Started Application
backup_dir=/backup/logs
pid_log=/var/run/myapp.pid

最终启动命令会变成：

/usr/bin/java -Dloadtime=30 -Dpeak=100 -Dmode=fast -jar /path/to/myapp.jar --spring.profiles.active=prod


---

要不要我再帮你加一个 必填参数检查（比如 java_home、jar_file、log_file、pid_log 一定要有，否则报错退出）？


在 AWS CloudWatch Logs Insights 中，如果你选择按 pod 或其他字段进行 group by，然后使用 stats 聚合数据（如 sum(memoryUsage)），默认情况下，结果通常会以 柱状图（Bar chart）形式呈现，而不是时序图。这是因为时序图（Time series graph）要求数据点按时间序列排列，而 group by pod 会导致数据被按不同 Pod 或其他字段分组，这样就不再是单一时间序列数据。

如何在时序图中展示每个 Pod 的内存使用情况？
为了在时序图中显示每个 Pod 的内存使用情况，你需要确保每个数据点都能与时间关联。可以通过调整查询，使得数据按时间进行分组，而不是按 pod 分组。具体来说，可以使用 bin() 函数按时间对数据进行分组，并且 group by 中不包括 pod，或者按时间和 pod 组合进行分组。

解决方案：按时间和 Pod 分组，且保留时序图显示
假设你希望查看每个 Pod 的内存使用情况随时间的变化，可以使用类似如下的查询：

查询：按时间和 Pod 分组显示内存使用情况
sql
复制代码
fields @timestamp, @message
| filter @message like /memoryUsage/
| parse @message "namespace: *, podName: *, memoryUsage: *" as namespace, podName, memoryUsage
| stats sum(memoryUsage) as totalMemory by bin(5m), podName  # 每5分钟聚合一次数据
| sort @timestamp asc
解析：
bin(5m)：将数据按时间窗口分组，例如，每5分钟聚合一次数据。你可以根据需求调整时间窗口（如 bin(1h) 按小时分组）。

group by bin(5m), podName：按时间和 Pod 名称进行分组，从而确保每个 Pod 在每个时间段内都有一个数据点。

stats sum(memoryUsage) as totalMemory：对每个时间段内的内存使用量求和，得到每个 Pod 的总内存使用量。

sort @timestamp asc：按时间升序排序结果。

输出示例：
假设你有两个 Pod my-app-abc123 和 my-app-def456，查询结果可能如下：

timestamp	podName	totalMemory
2024-11-13T00:00:00Z	my-app-abc123	100Mi
2024-11-13T00:05:00Z	my-app-abc123	150Mi
2024-11-13T00:00:00Z	my-app-def456	80Mi
2024-11-13T00:05:00Z	my-app-def456	90Mi
为什么这种方式可以用于时序图？
时间关联：由于查询按 bin(5m) 聚合数据，并且每个 podName 都有一个时间戳，因此每个 Pod 会在时序图中有一个时间序列数据点。
分组粒度：通过设置时间窗口（如 5 分钟、1 小时等），CloudWatch 可以将每个时间段的内存使用量绘制成时序图。
如何在 CloudWatch 控制台中查看时序图？
执行查询后，在 CloudWatch Logs Insights 控制台上，你可以看到一个图表选项，默认情况下，图表类型是 柱状图（Bar chart）。

在图表部分，点击图表类型的下拉菜单，选择 时序图（Time series）。这样，CloudWatch 就会根据时间轴显示每个 podName 在每个时间段的内存使用量。

确保查询结果中的每个时间点都包含 podName，这样你就可以在时序图中看到每个 Pod 的内存使用情况随时间的变化。

注意：
时间范围：时序图会依据查询的时间范围显示数据，确保查询的时间范围包含足够的数据点，以便绘制时序图。
数据粒度：bin() 函数决定了聚合的粒度。如果设置为 bin(1h)，那么每个小时的内存使用情况会作为一个数据点出现在时序图中。你可以根据需要调整为不同的时间窗口，如 bin(10m)、bin(30m) 等。
通过这种方式，你可以在 AWS CloudWatch Logs Insights 中按时间和 Pod 分组数据，并以时序图的形式查看每个 Pod 的内存使用情况随时间的变化。
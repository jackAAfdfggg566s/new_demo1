很好，你现在有两个 Pipeline：

✅ pipeline A：检查所有机器（不传用户变量，使用默认 IP 列表）

✅ pipeline B：只检查某一台机器（通过 variable 传入 IP 编号）

🔄 它们共用函数逻辑，比如 get_ip_by_index 和 get_name_by_ip

✅ extends 不同，分别继承不同模板逻辑



---

✅ 推荐结构设计（干净、易维护）

.gitlab/
├── templates/
│   ├── check_one.yml         # 用于检查单台机器的 Job 模板
│   └── check_all.yml         # 用于检查全部机器的 Job 模板
├── functions.sh              # 公共 shell 函数
.gitlab-ci.yml                # 主 pipeline


---

✅ functions.sh（完全支持你的需求）

# functions.sh

# 默认 IP 列表
DEFAULT_IPS=("192.168.1.1" "192.168.1.2" "192.168.1.3" "192.168.1.4")

# IP ↔ 名称
get_name_by_ip() {
  case "$1" in
    192.168.1.1) echo "host-a" ;;
    192.168.1.2) echo "host-b" ;;
    192.168.1.3) echo "host-c" ;;
    192.168.1.4) echo "host-d" ;;
    *) echo "unknown" ;;
  esac
}

get_ip_by_index() {
  case "$1" in
    1) echo "192.168.1.1" ;;
    2) echo "192.168.1.2" ;;
    3) echo "192.168.1.3" ;;
    4) echo "192.168.1.4" ;;
    *) echo "" ;;
  esac
}


---

✅ .gitlab/templates/check_all.yml

.check_all_template:
  script:
    - source ./functions.sh
    - for ip in "${DEFAULT_IPS[@]}"; do
        name=$(get_name_by_ip "$ip");
        echo "检查 $name ($ip)...";
        # 此处执行检查逻辑
      done


---

✅ .gitlab/templates/check_one.yml

.check_one_template:
  script:
    - source ./functions.sh
    - selected_ip=$(get_ip_by_index "$INDEX")
    - if [ -z "$selected_ip" ]; then
        echo "编号无效: $INDEX"; exit 1;
      fi
    - name=$(get_name_by_ip "$selected_ip")
    - echo "仅检查 $name ($selected_ip)..."
    # 此处执行检查逻辑


---

✅ 主 .gitlab-ci.yml 示例

include:
  - local: '.gitlab/templates/check_all.yml'
  - local: '.gitlab/templates/check_one.yml'

stages:
  - check

check-all-machines:
  stage: check
  extends: .check_all_template

check-one-machine:
  stage: check
  extends: .check_one_template
  variables:
    INDEX: 2   # ✅ 用户或 schedule job 可指定这个变量


---

✅ 用户控制逻辑：

check-all-machines：运行全部，不接受变量（不可变）

check-one-machine：用户或手动输入 INDEX 选择 IP


你还可以用 only:variables 限制 job 何时能运行。


---

如果你希望让用户无法误操作 check-all 的 DEFAULT_IPS，可以把默认 IP 写死在 functions.sh 里，或从安全变量读取（但不暴露在 UI）。

是否需要我进一步封装


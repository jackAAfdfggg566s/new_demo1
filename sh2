要在 GitLab CI/CD 流水线中添加参数，以运行不同的脚本，可以通过传递变量到 GitLab CI 作业或 Ansible Playbook 来实现。你可以使用 GitLab CI 传递参数，并在 Playbook 中使用这些参数来运行不同的脚本。

步骤 1：修改 .gitlab-ci.yml 文件，传递参数

在 .gitlab-ci.yml 文件中，可以使用 variables 来定义参数，并将这些参数传递给 Ansible Playbook。

stages:
  - deploy

deploy:
  stage: deploy
  script:
    # 安装 Ansible 和 sshpass（如果未安装）
    - apt-get update && apt-get install -y ansible sshpass

    # 设置 SSH 密钥（通过 GitLab secret 变量）
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

    # 禁用 SSH 主机密钥检查
    - echo "Host *" > ~/.ssh/config
    - echo "  StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config

    # 传递脚本参数给 Playbook
    - ansible-playbook -i "your-remote-host," --user your-username --private-key ~/.ssh/id_rsa \
      -e "ansible_ssh_extra_args=-o StrictHostKeyChecking=no" \
      -e "script_name=${CI_COMMIT_REF_NAME}" \
      run_script.yml

在上面的配置中，我们使用了 CI_COMMIT_REF_NAME（GitLab CI 提供的内置变量）作为一个示例来传递当前 Git 分支的名称，作为 script_name 传递给 Playbook。你也可以根据需要定义其他的环境变量来控制不同脚本的运行。

步骤 2：修改 Ansible Playbook 来接收参数并运行不同脚本

在 Ansible Playbook (run_script.yml) 中，使用 script_name 参数来决定执行哪个脚本。我们可以根据传递的 script_name 变量来选择不同的脚本文件。

---
- name: Run a script on remote machine based on input parameter
  hosts: localhost  # 单个主机，GitLab CI 会动态传递
  gather_facts: no

  tasks:
    - name: Run the corresponding script based on script_name
      ansible.builtin.shell: |
        # 根据 script_name 运行不同的脚本
        if [ "{{ script_name }}" == "feature-branch" ]; then
          /path/to/feature-script.sh
        elif [ "{{ script_name }}" == "development" ]; then
          /path/to/development-script.sh
        else
          /path/to/default-script.sh
        fi
      become: yes  # 如果需要 root 权限，使用 become

在上面的 Playbook 中：

我们使用了 script_name 变量，该变量在 GitLab CI 中传递（如 CI_COMMIT_REF_NAME）。

使用条件语句 (if, elif, else) 来根据传递的 script_name 变量运行不同的脚本。例如，feature-branch 会运行 feature-script.sh，development 会运行 development-script.sh，默认则运行 default-script.sh。


步骤 3：配置不同的脚本

确保你在远程机器上有多个脚本，并将它们路径正确传递给 Ansible Playbook。例如：

/path/to/feature-script.sh

/path/to/development-script.sh

/path/to/default-script.sh


步骤 4：触发流水线并传递参数

你可以通过 GitLab CI/CD 的参数来动态传递脚本名称。如果你希望在 GitLab CI 中传递不同的分支或环境参数，也可以在 GitLab CI 的 Variables 页面中定义这些变量。

例如：

CI_COMMIT_REF_NAME: 这个 GitLab 内置变量会返回当前提交的 Git 分支名称，可以根据分支名来决定执行的脚本。

你也可以手动在 GitLab CI 作业中定义其他变量，例如：


variables:
  SCRIPT_NAME: "development"

然后，在 Playbook 中传递这个变量：

ansible-playbook -i "your-remote-host," --user your-username --private-key ~/.ssh/id_rsa \
  -e "script_name=${SCRIPT_NAME}" \
  run_script.yml

小结：

1. 在 .gitlab-ci.yml 文件中通过 -e 选项传递参数到 Ansible Playbook。


2. 在 Ansible Playbook 中使用这些参数来执行不同的脚本。


3. 可以通过 GitLab CI 提供的内置变量或手动设置自定义变量来控制执行哪个脚本。



这样，GitLab CI/CD 流水线就能根据不同的分支或环境动态执行不同的远程脚本。

